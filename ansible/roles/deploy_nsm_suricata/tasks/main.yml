---
- name: Create host folders for suricata configs and rules
  file:
    path: "{{ host_container_root }}/{{ item }}"
    state: directory
    mode: 0750
  loop:
    - "{{ suricata.name }}"
    - "{{ suricata.name }}/config"

- name: pull custom images
  docker_image:
    name: "{{ item }}"
    source: pull
    force_source: yes
  retries: 15
  delay: 2
  register: docker_pull
  until: not docker_pull.failed
  loop:
    - "{{ suricata_image }}"
    - "{{ suricata_custom_shipper_image }}"
    - "{{ suricata_filebeat_shipper_image }}"
    - "{{ suricata_update_image }}"

- set_fact:
    meerkat: 
      data_vol: "data-{{ suricata.name }}"
      rule_vol: "rules-{{ suricata.name }}"
      socket_vol: "sockets-{{ suricata.name }}"
      data_socket_vol: "event-sockets-{{suricata.name}}"

- name: Create volumes for suricata
  docker_volume:
    name: "{{ item }}"
  loop:
    - "data-{{ suricata.name }}"
    - "rules-{{ suricata.name }}"
    - "sockets-{{ suricata.name }}"
    - "event-sockets-{{ suricata.name }}"

- name: Deploy suricata-update configs
  template:
    src: "{{ item.src }}"
    dest: "{{ host_container_root }}/{{ suricata.name }}/config/{{ item.dest }}"
    mode: 0644
  loop:
    - src: update.j2
      dest: update.yaml
    - src: disable.j2
      dest: disable.conf
  register: suricata_update_config_updated

- name: Deploy suricata-update configs
  template:
    src: "{{ item.src }}"
    dest: "{{ host_container_root }}/{{ suricata.name }}/config/{{ item.dest }}"
    mode: 0644
  loop:
    - src: suricata.j2
      dest: suricata.yaml
  notify: 
    - restart suricata
  register: suricata_config_updated

- name: Deploy filebeat config
  template:
    src: "{{ item.src }}"
    dest: "{{ host_container_root }}/{{ suricata.name }}/config/{{ item.dest }}"
    mode: 0644
  loop:
    - src: filebeat.j2
      dest: filebeat.yml
  notify: 
    - restart suricata filebeat
  register: suricata_filebeat_config_updated
  when: suricata_filebeat_shipper is defined and suricata_filebeat_shipper.deploy

- set_fact:
    suricata_volumes: 
      - "{{ host_container_root }}/{{ suricata.name }}/config/suricata.yaml:/etc/suricata/suricata.yaml:ro"
      - "rules-{{ suricata.name }}:/var/lib/suricata:ro"
      - "sockets-{{ suricata.name }}:{{ suricata_socket_dir }}:rw"
    suricata_log_volumes:
      - "data-{{ suricata.name }}:{{ suricata_log_dir }}:rw"
    suricata_socket_volumes:
      - "event-sockets-{{ suricata.name }}:/var/lib/peek:rw"
    suricata_filebeat_config_volume: 
      - "{{ host_container_root }}/{{ suricata.name }}/config/filebeat.yml:/etc/filebeat.yml:ro"

- set_fact:
    suricata_extended_volumes: "{{ suricata_volumes + suricata_socket_volumes + suricata_log_volumes }}"
    suricata_container_name: "{{ suricata.name }}"
    suricata_filebeat_container_name: "{{ suricata.name }}-filebeat-shipper"

- name: Run custom event shipper for suricata through unix socket output
  docker_container:
    name: "{{ suricata.name }}-peek-shipper"
    image: "{{ suricata_custom_shipper_image }}"
    state: "{{ 'started' if suricata_peek_shipper.enabled | default(false) else 'stopped' }}"
    restart_policy: unless-stopped
    command: run
    network_mode: host
    env:
      PEEK_INPUT_UXSOCK_ENABLED: 'true'
      PEEK_INPUT_UXSOCK_OVERWRITE: 'true'
      PEEK_STREAM_SURICATA_UXSOCK: "/var/lib/peek/{{ suricata_peek_shipper.socket_name | default('suricata-events.socket') }}"
      PEEK_PROCESSOR_COMPAT_LOGSTASH: 'true'
      PEEK_OUTPUT_KAFKA_ENABLED: "{{ 'true' if suricata_peek_shipper.kafka.enabled | default(false) else 'false' }}"
      PEEK_OUTPUT_KAFKA_HOST: "{{ suricata_peek_shipper.kafka.brokers | default(['localhost:9092']) | join(' ') }}"
      PEEK_OUTPUT_KAFKA_TOPIC: "{{ suricata_peek_shipper.kafka.topic | default('events-suricata') }}"
      PEEK_OUTPUT_ELASTIC_ENABLED: "{{ 'true' if suricata_peek_shipper.elastic.enabled | default(false) else ' false' }}"
      PEEK_OUTPUT_ELASTIC_HOST: "{{ suricata_peek_shipper.elastic.hosts | default(['http://localhost:9200']) | join(' ') }}"
      PEEK_OUTPUT_ELASTIC_PREFIX: "{{ suricata_peek_shipper.elastic.index | default('events-suricata') }}"
      PEEK_OUTPUT_ELASTIC_MERGE: 'true'
      PEEK_OUTPUT_ELASTIC_HOURLY: "{{ 'true' if suricata_peek_shipper.elastic.hourly | default(false) else 'false' }}"
    volumes: "{{ suricata_socket_volumes }}"
  when: suricata_peek_shipper is defined and suricata_peek_shipper.deploy

- name: Run filebeat event shipper for suricata through file output
  docker_container:
    name: "{{ suricata_filebeat_container_name }}"
    image: "{{ suricata_filebeat_shipper_image }}"
    state: "{{ 'started' if suricata_filebeat_shipper.enabled | default(false) else 'stopped' }}"
    restart_policy: unless-stopped
    command: run -c /etc/filebeat.yml
    network_mode: host
    volumes: "{{ suricata_log_volumes + suricata_filebeat_config_volume }}"
  when: suricata_filebeat_shipper is defined and suricata_filebeat_shipper.deploy

- name: Run container for suricata
  docker_container:
    name: "{{ suricata.name }}"
    image: "{{ suricata_image }}"
    state: started
    network_mode: host
    restart_policy: unless-stopped
    privileged: yes 
    capabilities:
      - net_admin
      - sys_nice
    volumes: "{{ suricata_extended_volumes }}"
    command: "--af-packet -vvv"
    env:
      PUID: "61000"
      PGID: "61000"

- name: Deploy suricata rules
  docker_container:
    name: "{{ suricata.name }}-update"
    image: "{{ suricata_update_image }}"
    volumes:
      - "{{ host_container_root }}/{{ suricata.name }}/config/update.yaml:/etc/update.yaml:ro"
      - "{{ host_container_root }}/{{ suricata.name }}/config/disable.conf:/etc/disable.conf:ro"
      - "rules-{{ suricata.name }}:/var/lib/suricata:rw"
    command: "suricata-update -c /etc/update.yaml"
    detach: no
    auto_remove: no
    env:
      PUID: "61000"
      PGID: "61000"
  register: restult
  tags:
    - suricata_rule_update

# skip if suricata config is changed, handler will restart the daemon anyway leading to wasted deploy time and even socket connect fail
- name: Reload suricata on rule update
  docker_container:
    name: "{{ suricata.name }}-reloader"
    image: "{{ suricata_image }}"
    detach: no
    auto_remove: no
    entrypoint:
      - suricatasc
      -  "-c reload-rules"
    volumes:
      - "{{ host_container_root }}/{{ suricata.name }}/config/suricata.yaml:/etc/suricata/suricata.yaml:ro"
      - "sockets-{{ suricata.name }}:{{ suricata_socket_dir }}:rw"
  when: not suricata_config_updated.changed and not docker_pull.changed
  tags:
    - suricata-rule-update

- name: cleanup
  docker_container:
    name: "{{ item }}"
    state: absent
  loop:
    - "{{ suricata.name }}-update"
    - "{{ suricata.name }}-reloader"
